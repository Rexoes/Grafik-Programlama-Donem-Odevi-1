
Proje’nin amacı Java platformunda, 2D programlama mantığı ile Pacman oyunu’nun tasarlanması ve gerçeklenmesidir. Projenin tasarlanabilmesi için ilk etapta kavramsal raporlarda da bahsettiğimiz üzere Pacman oyunu’nun mekaniği’nin anlaşılması ardından oyundaki temel kuralların metodolojik olarak belirlenmesi gerekmektedir. Bu kurallar belirlendikten sonra parçalara bölünür, metotları oluşturulur ve kademe kademe debug edilerek program kodu geliştirilmiştir.

Kod geliştirme sürecinde Nesne Tabanlı Programlama (OOP) ve encapsulation gibi programlama modelleri kullanılarak hem oyun içerisindeki nesnelerin programcı tarafından daha kolay bir şekilde kontrol edilmesi, miras alma özelliği ile oyun alanı (frame), timer ve eventListener gibi yoğun kod yazılarak gerçekleştirilebilecek classların parametre ve metotları Model sınıfımıza miras aldıktan sonra gerekli parametre güncellemeleri ve amacımıza uygun olarak metotlara override ile müdahale ederek kodumuzu daha hızlı geliştirebildik ve kullanıcıdan soyutlamış olduk.

Oyun parkuru’nun bir şekle bürünmesinde ve hareket fonksiyonlarında dx/dy gibi yönelme parametrelerini kontrol etmek için kullanılmak üzere oluşturulan levetData array’i 2’nin kuvvetleri kullanılarak şifrelenmiştir. Bu şifrelemede 6 adet anlam saklanmaktadır bunlar; oyun parkurundaki duvarları engelleri temsil eden (0), parkurun en dış çerçevesi ve engellerin etrafında kullanılmak üzere sol köşe (1), üst köşe (2), sağ köşe (4), alt köşe (8) ve yemleri temsil etmek için (16) sayısı kullanılmıştır. Dx/dy gibi yönelme parametrelerini tutan değişkenler, işaret tuşlarına sürekli basmayı zorunlu kılmadan bir kez tuşa basılıp çekildikten sonra bile 1’e set edildikleri için bir sonraki yöneleceği koordinatın engel olup olmamasına göre dx/dy parametrelerine Pacman veya Ghostların o anki koordinatlarına göre hesaplanan position bilgisi, levetData dizisindeki indekse karşılık gelen 0-28 arasında sınırlı olan şifrelenmiş değerin çözümlenmesi ile müdahale edilmektedir.

Örneğin diziden gelen değer 22 ise bu sayı ikinin kuvvetleri’nin toplamı olacak şekilde çözümlenir. 22 -> 16 + 4 + 2 çözümlemesinden bu koordinatın 4 ve 2 değerlerinden sağ üst köşede olduğu ve 16 sayısından dolayı bir nokta (yem) olduğu anlaşılmaktadır. Pacman bu koordinata geldiğinde yemi yer ve dx/dy parametreleri 0’a set edilir. Aynı çözümlemeler Ghostların hareketi içinde geçerlidir.

Kod geliştirilirken static olarak oluşturulan bu dizi, kullanıcının levelleri atlamasına bağlı olarak değiştirilen bir dinamik bitmap haline de getirilebilir ve ghosların adet ve hızları artırılabilir.

Bütün işlemleri yönettiğimiz Model sınıfının yapıcı metodunda ilk çağrılma esnasında / oyun başlatıldığında oyun parkuru içerisindeki Pacman, Ghost ve kalan can adedini temsil eden kalp imgelerini yüklemek için loadImages() metodu, oyun parkuru’nun çözünürlük, blok adedi, oyun akış hızı ve ghostların oluşturulduğu initVariables() metodu, oyuncunun can sayısı, skor ve ghost sayılarını belirlediğimiz initGame() metodu ve oyuncunun klavyeden girdiği yönelme hareketleri almak üzere addKeyListenner() metotları çağrılmıştır.

Yapıcı metot’ta oluşturduğumuz Tadapter sınıfı KeyAdapter sınfından miras almakta ve kullanıcının girdiği klavye komutlarını dinlemektedir. Eğer istenirse KeyReleased metodu kullanılarak kullanıcı tuştan elini çektiği anda Pacman’inde hareketi’nin durdurulması sağlanabilir. Tadapter sınıfında yaptığımız işlemler bizim için çok önemlidir çünkü girilen işaret tuşlarına göre req_dx ve req_dy değişkenlerini belirlemekteyiz. Bu değişkenler ise Pacman’in hareket ve çizim metotlarında kullanılan en önemli parametredir çünkü Pacman yönelmesini (dx/dy) ve bu yönelme yönüne göre uygun ikonun çizilmesinde kullanılmaktadır.

En hayati olan movePacman() metodunda Pacman’in öncelikle mevcut konumuna göre position bilgisi ardından da bu koordinat değerine karşılık gelen ikinin kuvvetleri’nin toplamı şeklinde şifrelenen değer çözümlenmekte ve 16 sayısı ile ikilik tabanda AND işlemine tabi tutularak o koordinat’ta yem varsa score değeri artırılmaktadır. Sonrasında Tadapter sınıfında set edilen req_dx, req_dy değişkenleri ve çözümlenen ch verisi kontrol edilerek eğerki engel varsa bu değeler 0’a yok ise pacman’in x ve y koordinatlarına atanmaktadır. Son olarak bu değerler Pacman’in hızı ile çarpılarak yeni koordinatı belirlenmektedir. MoveGhost() metodu da bu metoda benzerlik göstermektedir, oyun sahasında bulunan herbir ghost için bulundukları koordinat ve o döngü esnasında rastgele bir şekilde belirlenen parametre ile herbir ghostun farlı hareket etmesi sağlanmıştır.

Oyun içerisindeki akışı sürekli bir şekilde sağlayan paintComponent() metodu eğerki oyun hala devam ediyor yani inGame değişkeni false değerine set edilmediği sürece playGame() metodunu çağırmaktadır, bu metotda eğerki moveGhost() metounda Pacman ile Ghostun teması halinde set edilen dying değişkeni false olursa yani Ghost Pacman’i yakalamamışsa  sırasıyla movePacman(), drawPacman(), moveGhost() ve checkMaze() metotları çağrılmaktadır. DrawGhost() metodu zaten moveGhost() metounda herbir ghost için çağrıldığı için buraya yazılmamıştır. Eğerki moveGhost() metounda kontrol edilen dying değişkeni  ghostun Pacman’i yakalaması durumunda true değerine set edilirse death() metodu çağrılmaktadır. Death() metodu her bir çağrılmada can değerini (lives) azaltmakta ve sonrasında continueLevel() metodunu çağırarak ghost ve Pacman’i default olarak set edilen başlangıç koordinatlarında yem ve skor değerini resetlemeden oyunu devam ettirir. Eğerki lives değeri 0 olursa inGame değişkeni false’a set edilerek sürekli döngü hali
nde olan paintComponent() metodu’nun showIntroScreen() metodunu çağırarak oyunu durdurup toplam skoru ekrana basmaktadır.

